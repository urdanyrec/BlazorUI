@page "/put"
@using System.Net.Http
@inject HttpClient Http
@using System.Net.Http.Json
@using System.Text.Json
@using System.Threading.Tasks
@using PhysicalObjectInfo.Domain
@using System.Text.Json.Serialization;
<h3>Список физических объектов</h3>
<p>@MessageAdd</p>

<button @onclick="PutPhysicalObject" class="btn btn-success">Добавить</button><br />

@code {
    [Parameter]
    public string MessageAdd { get; set; }

    private PhysicalObject objects;
    private bool fulfil = false;

    protected override async Task OnParametersSetAsync() =>
        objects = await Http.GetFromJsonAsync<PhysicalObject>
            ("https://localhost:7230/api/PhysicalObject/69435550-409e-48a0-ab35-dc56a34e2f10");

    protected override async Task OnInitializedAsync()
    {
        objects = await Http.GetFromJsonAsync<PhysicalObject>
            ("https://localhost:7230/api/PhysicalObject/69435550-409e-48a0-ab35-dc56a34e2f10");
        fulfil = true;
    }

    public EventCallback<string> OnDeletePhysicalObject { get; set; }

    private async Task PutPhysicalObject()
    {
        string id = "69435550-409e-48a0-ab35-dc56a34e2f10";
        string uri = "https://localhost:7230/api/PhysicalObject/" + id.ToString();
        objects.State = "Off";
        var UpdatedPhysicalObject = JsonSerializer.Serialize(objects);
        var response = await Http.PutAsync("https://localhost:7230/api/PhysicalObject", new StringContent(UpdatedPhysicalObject, System.Text.Encoding.UTF8, "application/json")); 
        await OnDeletePhysicalObject.InvokeAsync("OK");
        StateHasChanged();
        //Reload();
        //NavigationManager.NavigateTo("/listobject");
    }

}
